
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PartyService = require(game.ServerScriptService:WaitForChild("PartyService"))

local remotes = ReplicatedStorage:WaitForChild("PartyRemotes")

-- Ensure PartyGetMembers exists
local getMembers = remotes:FindFirstChild("PartyGetMembers")
if not getMembers then
	getMembers = Instance.new("RemoteFunction")
	getMembers.Name = "PartyGetMembers"
	getMembers.Parent = remotes
end

getMembers.OnServerInvoke = function(player)
	local party = PartyService:GetParty(player)
	return party and party.Members or {}
end

-- Ensure PartyGetLeader exists
local getLeader = remotes:FindFirstChild("PartyGetLeader")
if not getLeader then
	getLeader = Instance.new("RemoteFunction")
	getLeader.Name = "PartyGetLeader"
	getLeader.Parent = remotes
end

getLeader.OnServerInvoke = function(player)
	local party = PartyService:GetParty(player)
	return party and party.Leader or nil
end

remotes.PartyInvite.OnServerInvoke = function(player, target)
	print(player.Name .. " invited " .. target.Name)
	return PartyService:Invite(player, target)
end

remotes.PartyLeave.OnServerEvent:Connect(function(player)
	PartyService:LeaveParty(player)
end)
remotes.PartyKick.OnServerEvent:Connect(function(player, target)
	PartyService:KickMember(player,target)
end)

-- Optional: Accept invite
remotes.AcceptInvite.OnServerInvoke = function(player)
	return PartyService:AcceptInvite(player)
end
